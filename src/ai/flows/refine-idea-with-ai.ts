
// 'use server'
'use server';

/**
 * @fileOverview Refines a user's idea, suggests pivots, and provides preliminary analysis including chart data and a conceptual image.
 *
 * - refineIdea - A function that refines an idea using AI.
 * - RefineIdeaInput - The input type for the refineIdea function.
 * - RefineIdeaOutput - The return type for the refineIdea function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const RefineIdeaInputSchema = z.object({
  idea: z.string().describe('The original idea, concept, or research question to be refined.'),
  marketData: z
    .string()
    .optional()
    .describe('Optional context, related work, or constraints to inform the refinement process.'),
  focusKeywords: z
    .string()
    .optional()
    .describe('Optional keywords to focus the refinement (e.g., "B2B SaaS", "mechanistic interpretability").'),
});

export type RefineIdeaInput = z.infer<typeof RefineIdeaInputSchema>;

const ImpactFactorSchema = z.object({
  name: z.string().describe("The name of the viability factor (e.g., Tractability, Scalability, Market Size, Novelty)."),
  score: z.number().min(0).max(100).describe("The AI-estimated score for this factor (0-100)."),
});

// Full output schema including the image URL
const RefineIdeaOutputSchema = z.object({
  refinedIdea: z.string().describe('A refined, more specific, and testable hypothesis or concept generated by the AI.'),
  associatedConcepts: z.array(z.string()).describe('A list of associated concepts or technical fields explored by the AI.'),
  potentialPivots: z.array(z.string()).describe('A list of potential alternative directions, business pivots, or experimental setups.'),
  marketPotentialScore: z.number().min(0).max(100).describe('An estimated overall "Potential Impact Score" from 0 to 100, assessing the idea\'s potential for market success or research contribution.'),
  swotSnippet: z.string().describe("A key strength or opportunity for the project (e.g., 'Strength: Leverages a novel property of transformers...'). Format as 'Strength: [description]' or 'Opportunity: [description]'."),
  competitorTeaser: z.string().describe('A brief summary of the competitive landscape or related work, mentioning 1-2 key competitors/papers and how this idea differs.'),
  viabilityFactorsChartData: z.array(ImpactFactorSchema)
    .min(3).max(5)
    .describe("An array of 3 to 5 key viability factors and their AI-estimated scores (0-100), suitable for a bar chart. Each factor should be an object with 'name' (string) and 'score' (number). Examples: { name: 'Tractability', score: 75 }, { name: 'Market Size', score: 90 }."),
  conceptualImageUrl: z.string().optional().describe('A data URI of a generated conceptual image for the idea (e.g., "data:image/png;base64,..."), if successful. Expected format: \'data:<mimetype>;base64,<encoded_data>\'.'),
});
export type RefineIdeaOutput = z.infer<typeof RefineIdeaOutputSchema>;

// Schema for the text-only part of the output
const RefineIdeaTextOutputSchema = RefineIdeaOutputSchema.omit({ conceptualImageUrl: true });
type RefineIdeaTextOutput = z.infer<typeof RefineIdeaTextOutputSchema>;


// Prompt for generating the textual analysis (uses default text model)
const refineIdeaTextPrompt = ai.definePrompt(
  {
    name: 'refineIdeaTextPrompt',
    input: {schema: RefineIdeaInputSchema},
    output: {schema: RefineIdeaTextOutputSchema}, // Expects structured text output
    // Model will be the default from genkit.ts
    prompt: `You are an expert business consultant and startup advisor with a strong background in academic research. You are helping to refine a project idea for a program like Y-Combinator or a research group like LASR Labs.

    The user will provide an idea, optional context, and optional focus keywords. The idea could be a business concept or a research question. Tailor your response accordingly.

    Original Idea: {{{idea}}}
    {{#if marketData}}Context/Related Work: {{{marketData}}}{{/if}}
    {{#if focusKeywords}}Focus Keywords: {{{focusKeywords}}}{{/if}}

    Based on the input, provide the following structured analysis:
    - Refined Idea: (Provide a concise, actionable, and testable hypothesis or business concept.)
    - Associated Concepts: (List 3-5 relevant concepts or technical fields related to this idea.)
    - Potential Pivots: (Suggest 2-3 potential alternative business models, experiments, or related ideas.)
    - Potential Impact Score: (Provide an estimated OVERALL potential impact score for the refined idea, as a number between 0 and 100. Base this on its potential for market success OR its contribution to a field of research. Just output the number.)
    - SWOT Snippet: (Identify ONE key Strength OR ONE key Opportunity for this project. Format as 'Strength: [Concise description]' or 'Opportunity: [Concise description]'. Be specific.)
    - Competitor/Related Work Teaser: (Summarize the landscape. Mention 1-2 key competitors, papers, or existing methods and briefly state how this idea builds upon or diverges from them.)
    - Viability Factors Chart Data: (Provide 3-5 key viability factors relevant to the idea, such as 'Tractability', 'Scalability', 'Potential Impact', 'Novelty', 'Market Size'. Assign an estimated score (0-100) to each. Format as an array of objects, where each object has a 'name' (string) and a 'score' (number). Example: [{ "name": "Tractability", "score": 75 }, { "name": "Market Size", "score": 90 }]. Ensure you return between 3 and 5 factors.)
  `,
  }
);

const refineIdeaFlow = ai.defineFlow(
  {
    name: 'refineIdeaFlow',
    inputSchema: RefineIdeaInputSchema,
    outputSchema: RefineIdeaOutputSchema, // The flow still outputs the full schema
  },
  async (input: RefineIdeaInput): Promise<RefineIdeaOutput> => {
    // 1. Get textual analysis
    const { output: textAnalysisOutput } = await refineIdeaTextPrompt(input);

    if (!textAnalysisOutput) {
        throw new Error("AI failed to generate textual analysis for the idea.");
    }

    // 2. Generate conceptual image (if text analysis was successful)
    let conceptualImageUrl: string | undefined;
    if (textAnalysisOutput.refinedIdea) {
      try {
        const imageGenerationPromptText = `Generate an abstract, conceptual, academic-style diagram representing the core mechanism of this idea: ${textAnalysisOutput.refinedIdea}. Use minimalist shapes, lines, and labels. The image should be suitable for a presentation slide or a modern landing page.`;
        
        const { media } = await ai.generate({
          model: 'googleai/gemini-2.0-flash-exp', // Specific model for image generation
          prompt: imageGenerationPromptText,
          config: {
            responseModalities: ['TEXT', 'IMAGE'], // Must include TEXT even if we primarily use IMAGE
          },
        });
        conceptualImageUrl = media?.url;
      } catch (imageError) {
        console.warn("Conceptual image generation failed:", imageError);
        // Non-fatal: proceed without image if generation fails
      }
    }

    // 3. Process and combine results
    let score = 50; // Default score
    if (textAnalysisOutput.marketPotentialScore && !isNaN(Number(textAnalysisOutput.marketPotentialScore))) {
        score = Number(textAnalysisOutput.marketPotentialScore);
    } else if (textAnalysisOutput.marketPotentialScore) {
        const match = String(textAnalysisOutput.marketPotentialScore).match(/\d+/);
        if (match) {
            score = parseInt(match[0], 10);
        }
    }
    score = Math.max(0, Math.min(100, score));

    let chartData = textAnalysisOutput.viabilityFactorsChartData || [];
    if (!Array.isArray(chartData)) chartData = [];
    if (chartData.length < 3) {
        const needed = 3 - chartData.length;
        for (let i = 0; i < needed; i++) {
            chartData.push({ name: `Factor ${chartData.length + 1}`, score: Math.floor(Math.random() * 50) + 30 });
        }
    }
    chartData = chartData.slice(0, 5);

    return {
        ...textAnalysisOutput,
        marketPotentialScore: score,
        viabilityFactorsChartData: chartData.map(factor => ({
            name: factor.name || "Unnamed Factor",
            score: Math.max(0, Math.min(100, Number(factor.score) || 0)),
        })),
        conceptualImageUrl: conceptualImageUrl,
    };
  }
);

// Exported async wrapper function
export async function refineIdea(input: RefineIdeaInput): Promise<RefineIdeaOutput> {
  return refineIdeaFlow(input);
}
