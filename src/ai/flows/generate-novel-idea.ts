// src/ai/flows/generate-novel-idea.ts
'use server';

/**
 * @fileOverview Generates novel AI Safety research questions based on user-provided keywords or problem areas.
 *
 * - generateNovelIdea - A function that generates novel research questions.
 * - GenerateNovelIdeaInput - The input type for the generateNovelIdea function.
 * - GenerateNovelIdeaOutput - The return type for the generateNovelIdea function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const GenerateNovelIdeaInputSchema = z.object({
  keywords: z
    .string()
    .describe('Keywords or topics to focus the research question generation on (e.g., "model organisms", "emergent behavior").')
    .optional(),
  problemArea: z
    .string()
    .describe('A specific AI Safety problem to generate ideas for (e.g., "preventing deceptive alignment", "making oversight scalable").')
    .optional(),
});

export type GenerateNovelIdeaInput = z.infer<typeof GenerateNovelIdeaInputSchema>;

const NovelIdeaSchema = z.object({
  idea: z.string().describe('The novel AI Safety research question or proposal text.'),
  noveltyScore: z.number().min(1).max(10).describe('A score from 1 (well-trodden) to 10 (highly novel/unconventional) indicating the AI\'s assessment of the idea\'s originality within the AI Safety field.'),
});

const GenerateNovelIdeaOutputSchema = z.object({
  novelIdeas: z
    .array(NovelIdeaSchema)
    .describe('A list of novel AI Safety research questions generated by the AI, each with a novelty score.'),
});

export type GenerateNovelIdeaOutput = z.infer<typeof GenerateNovelIdeaOutputSchema>;

export async function generateNovelIdea(input: GenerateNovelIdeaInput): Promise<GenerateNovelIdeaOutput> {
  return generateNovelIdeaFlow(input);
}

const prompt = ai.definePrompt({
  name: 'generateNovelIdeaPrompt',
  input: {schema: GenerateNovelIdeaInputSchema},
  output: {schema: GenerateNovelIdeaOutputSchema},
  prompt: `You are an expert AI Safety researcher with a talent for identifying impactful and unconventional research directions, in the style of LASR Labs.
  Your goal is to generate 3-5 novel and concrete research questions or project proposals based on the provided input.
  For each idea, provide a "noveltyScore" from 1 (very common, e.g., "fine-tune a model to be less toxic") to 10 (highly unique and potentially groundbreaking).
  Avoid vague or overly broad ideas. Focus on questions that could lead to a concrete, empirical research project.

  Reference topics of interest for LASR Labs: multi-agent systems and collusion, theory of alignment in RL, deception in LLMs, interpretability, scalable oversight, capability evals, and AI control.

  {{#if keywords}}User Keywords: {{{keywords}}}{{/if}}
  {{#if problemArea}}User Problem Area: {{{problemArea}}}{{/if}}

  Focus on ideas that are "action-relevant" and tackle "concrete threat models" for advanced AI.

  Return the ideas as a list of objects, where each object contains an 'idea' (string, the research question) and a 'noveltyScore' (number 1-10).
  Example format for one idea: { "idea": "Can we develop a method to detect if an LLM is 'sandbagging' (deliberately underperforming) during safety evaluations by analyzing its internal activations?", "noveltyScore": 8 }
  `,
});

const generateNovelIdeaFlow = ai.defineFlow(
  {
    name: 'generateNovelIdeaFlow',
    inputSchema: GenerateNovelIdeaInputSchema,
    outputSchema: GenerateNovelIdeaOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    if (!output || !Array.isArray(output.novelIdeas)) {
        // Ensure a valid array is returned, even if empty
        return { novelIdeas: [] };
    }
     // Validate and clamp novelty scores
    const validatedIdeas = output.novelIdeas.map(item => ({
      idea: item.idea || "AI failed to provide idea text.",
      noveltyScore: Math.min(10, Math.max(1, Number(item.noveltyScore) || 5)), // Default to 5 if invalid
    }));
    return { novelIdeas: validatedIdeas };
  }
);
