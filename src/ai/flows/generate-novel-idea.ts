
// src/ai/flows/generate-novel-idea.ts
'use server';

/**
 * @fileOverview Generates novel business ideas based on user-provided keywords or problem areas.
 *
 * - generateNovelIdea - A function that generates novel business ideas.
 * - GenerateNovelIdeaInput - The input type for the generateNovelIdea function.
 * - GenerateNovelIdeaOutput - The return type for the generateNovelIdea function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const GenerateNovelIdeaInputSchema = z.object({
  keywords: z
    .string()
    .describe('Keywords or topics to focus the idea generation on.')
    .optional(),
  problemArea: z
    .string()
    .describe('A specific problem area to generate ideas for.')
    .optional(),
});

export type GenerateNovelIdeaInput = z.infer<typeof GenerateNovelIdeaInputSchema>;

const GenerateNovelIdeaOutputSchema = z.object({
  novelIdeas: z
    .array(z.string())
    .describe('A list of novel business ideas generated by the AI.'),
});

export type GenerateNovelIdeaOutput = z.infer<typeof GenerateNovelIdeaOutputSchema>;

export async function generateNovelIdea(input: GenerateNovelIdeaInput): Promise<GenerateNovelIdeaOutput> {
  return generateNovelIdeaFlow(input);
}

const prompt = ai.definePrompt({
  name: 'generateNovelIdeaPrompt',
  input: {schema: GenerateNovelIdeaInputSchema},
  output: {schema: GenerateNovelIdeaOutputSchema},
  prompt: `You are an expert in identifying novel business opportunities.
  Based on the provided keywords and problem areas, generate a list of truly novel business ideas.
  Avoid ideas that are commonly suggested or already saturated in the market.

  {{#if keywords}}Keywords: {{{keywords}}}{{/if}}
  {{#if problemArea}}Problem Area: {{{problemArea}}}{{/if}}

  Focus on ideas with the potential to generate significant revenue daily.

  Return the ideas as a list of strings.
  `,
});

const generateNovelIdeaFlow = ai.defineFlow(
  {
    name: 'generateNovelIdeaFlow',
    inputSchema: GenerateNovelIdeaInputSchema,
    outputSchema: GenerateNovelIdeaOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
